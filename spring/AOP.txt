DEmo: Spring_study的com.aop.annotations、com.aop.xml.
面向切面，就是将流程中的共同的部分抽离出来，相关设计模式为代理模式
1. spring中共分为五中通知类型
	前置通知 before ：在目标方法之前执行
	后置通知 after ：在目标方法之后执行，无论是否产生异常。
	返回通知 after-returning 在目标放回正确返回后执行：
	异常通知 after-throwing 在目标方法抛出异常后执行：
	环绕通知 around 包含上述的四个流程，可以等同于代理者模式：
	环绕通知Demo：
	public Object aroundMethod(ProceedingJoinPoint proceedingJoinPoint) {
		
		try {
			//@Before 前置通知
			result = proceedingJoinPoint.proceed();
			//@AfterReturning 返回通知
		} catch (Throwable e) {
			//@AfterThrowing 异常通知
		}
		//@After 后置通知
		
		return result;
	}

2.专业名词说明
	切面：抽象出来的共同部分作为一个切面，例如数据库事务；
	通知：切面具体执行的方法；
	目标：需要切入的对象；
	代理：向目标切入后生成的对象；
	连接点：在哪个目标的哪个方位执行，例如在com.aop.Test.doSomething() 方法的前面执行，整体叫做连接点包含哪个方法和哪个方位两个基本信息；
	切点：需要切入的方法的表达式，需要表明访问控制符、返回类型、方法全类名、参数列表，可使用通配符。
		例如 execution(* com.aop.annotations.*.*(..))
		第一个*：方法的访问控制符和返回类型；
		第二个*：类名；
		第三个*：方法名。
		(..)：所有的参数列表。
		
3.除去spring必备的jar包还需要
	aspectjrt.jar
	aspectjtools.jar
	aspectjweaver.jar
	spring-aop-5.0.4.RELEASE.jar
	spring-aspects-5.0.4.RELEASE.jar
	
	
4. 基于注解的形式实现，主要工作量在切面类上：
	1). 将切面类和目标类交给IOC容器管理，可通过注解形式实现;
	2). 通过 <aop:aspectj-autoproxy /> 标签使注解起作用；
	3). 编写具体的切面类：
		①. 编写具体的通知方法，可使用 org.aspectj.lang.JoinPoint 对象来获取目标方法的签名和参数等具体细节；
		②. 环绕通知使用 org.aspectj.lang.ProceedingJoinPoint 来获取相应的细节
		③. 返回通知，可通过添加一个Object 参数来获取返回值，变量名在配置中说明；
		④. 异常通知，可通过添加一个异常类参数来获取抛出的异常，异常变量名在配置中说明，该通知只有当抛出说明了的异常类的派生类\实现类时才会起作用。
		
	4). 配置切面类：
		注解于类上：
		①. @Aspect 表明该类是切面类；
		②. @Order 在多个切面同事切入时的执行循序；
		注解于方法上：
		③. @Before 前置通知，需要设置value属性表明使用哪个切点；
		④. @After 后置通知，需要设置value属性表明使用哪个切点；
		⑤. @AfterReturning 返回通知，需要设置value 值表明使用哪个切点，需要设置returning 属性表明返回变量名，可在具体通知方法的参数中使用；
		⑥. @AfterThrowing 异常通知，需要设置value 值表明使用哪个切点，需要设置throwing 表明说明抛出异常的变量名，可在具体通知方法的参数中使用；
		⑦. @Around 环绕通知，需要设置value 值表明使用哪个切点；
		⑧. @Pointcut 注解去定义一个方法(无需实现体)用于切点的重用，在其他通知中用调用改方法设置value 值；
	Demo：
XML：
	<!-- 自动扫描的包 -->
	<context:component-scan base-package="com.aop.annotations" />

	<!-- 使 AspectJ 的注解起作用 -->
	<aop:aspectj-autoproxy />
Class：
	@Order(0)
	@Aspect
	@Component
	public class ServiceAspect {
		
		@Pointcut("execution(* com.aop.annotations.*.*(..))")
		public void demoCut() {}
		
		@Before("demoCut()")
	//	@Before("execution(* com.aop.annotations.*.*(..))")
		public void beforeMethod(JoinPoint joinPoint) {
			String methodName = joinPoint.getSignature().getName();
			Object [] args = joinPoint.getArgs();
			
			System.out.println("The method " + methodName + " begins with " + Arrays.asList(args));
		}
		
		@After("demoCut()")
		public void afterMethod(JoinPoint joinPoint) {
			String methodName = joinPoint.getSignature().getName();
			
			System.out.println("The method " + methodName + " ends.");
		}
		
		@AfterReturning(value="demoCut()", returning="result")
		public void afterReturnning(JoinPoint joinPoint, Object result) {
			String methodName = joinPoint.getSignature().getName();
			
			System.out.println("The method " + methodName + " return " + result);
		}
		
		@AfterThrowing(value="demoCut()", throwing="e")
		public void afterThrowing(JoinPoint joinPoint, Exception e) {
			String methodName = joinPoint.getSignature().getName();
			
			System.out.println("The method " + methodName + " throw " + e.getMessage());
		}
		
		@Around("demoCut()")
		public Object aroundMethod(ProceedingJoinPoint proceedingJoinPoint) {
			Object result = null;
			String methodName = proceedingJoinPoint.getSignature().getName();
			
			try {
				//@Before 前置通知
				System.out.println("The method " + methodName + " around begin.");
				result = proceedingJoinPoint.proceed();
				//@AfterReturning 返回通知
				System.out.println("The method " + methodName + " around return.");
			} catch (Throwable e) {
				//@AfterThrowing 异常通知
				System.out.println("The method " + methodName + " around throw.");
			}
			//@After 后置通知
			System.out.println("The method " + methodName + " around ends.");
			
			return result;
		}
	}

5. 基于XML配置实现，主要工作量在xml文件中
<!-- 切面配置 -->
<aop:config>
	<!-- 
		定义一个切点
		expression：说明哪些方法需要切入该切面点；
		id：唯一标识，用于切面引用；
	 -->
	<aop:pointcut expression="execution(* com.aop.xml.*.*(..))" id="daoCut"/>
	<!-- 
		定义具体的切面实现
		ref：具体使用哪个切面类；
		order：当有多个切面时，定义切面的循序，值越小越优先；
	 -->
	<aop:aspect ref="daoAspect" order="0">
		<!-- 
			具体的通知(执行的方法)
				method：指明具体的方法名；
				pointcut-ref：指明使用的切点；
			<aop:before>：前置通知，
			<aop:after>：后置通知；
			<aop:after-returning>：返回通知，returning 指明返回变量名；
			<aop:after-throwing>：异常通知，throwing 指明返回的异常变量名；
			<aop:around>：环绕通知；
		 -->
		<aop:before method="beforeMethod" pointcut-ref="daoCut"/>
		<aop:after method="afterMethod" pointcut-ref="daoCut"/>
		<aop:after-returning method="afterReturnning" 
			pointcut-ref="daoCut" returning="result"/>
	</aop:aspect>
</aop:config>

