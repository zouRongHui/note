Demo: Spring_study的com.ioc.
IOC 控制反转，就是将实例的管理交给spring来管理，我们只需要使用的时候调用来获取实例即可。

基于XML配置，底层实现依赖于Java的反射机制
1. 给Bean配置属性值时有两种方式：
	基于setter，首先使用默认构造器创建，然后用setter赋值；
	基于构造器，直接使用相应的构造器创建对象；

3. 在设置Bean的值时，可引用其他Bean。还支持级联属性赋值
	
4. 内部Bean，仅在给某个Bean设置属性值时用到的情况下使用，在其他地方无法使用该Bean

5. 对于集合类型的配置使用<list>、<map>以及<util:list>、<util:map>等标签

6. 使用p命名空间简化代码，无需子标签以属性形式进行配置

7. 使用parent 属性去继承其他Bean的配置信息

8. 使用外部属性文件来配置

9. SpEL进行动态赋值

10. 配置Bean后置处理器，针对该容器的所有Bean

11. 使用工厂方法来配置
	
12. 使用spring提供的FactoryBean 接口来配置

Demo(Spring_study项目的com.ioc包)
Beans.xml
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:util="http://www.springframework.org/schema/util"
		xmlns:p="http://www.springframework.org/schema/p"
		xmlns:context="http://www.springframework.org/schema/context"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/util
		http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.0.xsd">
		
		<!-- 
			id:用来标识该bean;
			name:;
			class:bean全类名;
			lazy-init:延迟加载，default(默认值):使用全局的默认方案、
				flase:在容器实例化时就实例化该bean，
				true:延迟加载即获取该bean实例时才实例化;
			autowire:自动装配其他Bean，默认不使用，
				byName:根据Bean的属性名和id相匹配,byType:根据Class来匹配(只能有一个实例);
			parent:用来实现配置的继承;
			abstract:用来该Bean是否是模板(供其他Bean去继承实现配置的共享)，模板Bean不能实例化，默认false;
			depends-on:表明依赖关系，即要想实例本Bean，依赖Bean必须首先创立，多个时用逗号或空格隔开;
			scope:作用域，常见singleton、prototype，
				singleton:在该容器中只会有一个实例,
				prototype:在该容器中没调用一次产生一个新的实例;
			init-method:指定初始化方法，在实例化时就会初始化;
			destory-method:指定销毁方法;
				Bean的生命周期：
					1. 通过构造器或工厂方法创建 Bean 实例
					2. 为 Bean 的属性设置值和对其他 Bean 的引用
					3. 将 Bean 实例传递给 Bean 后置处理器的 postProcessBeforeInitialization 方法
					4. 调用 Bean 的初始化方法
					5. 将 Bean 实例传递给 Bean 后置处理器的 postProcessAfterInitialization方法
					6. Bean 可以使用了
					7. 当容器关闭时, 调用 Bean 的销毁方法
									
		-->
		<!-- 使用 setter 实现 -->
		<bean id="person" class="com.ioc.Person" lazy-init="true"
			init-method="init" destroy-method="destory">
			<!-- 
				name:对应的属性名，实际为setter方法后面紧接的字符;
				value:要赋值的值;
				ref:;要赋值的引用，其他bean的id值;
			 -->
			<property name="name" value="rone" />
			<property name="age" value="23" />
			<!-- 
			<property name="phone" ref="phone" />
			 -->
			<property name="phone">
				<!-- 内部Bean，只能在此使用，所以无需设置id/name属性 -->
				<bean class="com.ioc.Phone">
					<property name="name" value="P10" />
					<property name="brand" value="huawei" />
					<!-- 设置 NULL 值 -->
					<property name="price"><null/></property>
				</bean>
			</property>
			<!-- 支持级联属性赋值 -->
			<property name="phone.price" value="4399.00" />
			<property name="lovers">
				<!-- list集合类型，内部实现 -->
				<list>
					<value>myself</value>
					<value>father</value>
					<value>mother</value>
					<!-- 
					<ref bean="" />
					 -->
				</list>
			</property>
			<property name="experience" ref="experience" />
		</bean>
		
		<!-- 使用 constructor 实现 -->
		<bean id="phone" class="com.ioc.Phone" lazy-init="true">
			<!-- 
				value:要赋值的值;
				ref:要赋值的引用，其他bean的id值;
				index:该值在构造器的参数列表索引值，默认的循序从上往下从0开始;
				type:该值的类型，用于实现重载，可不定义;
				name:参数名，用于实现重载，可不定义;
			 -->
			<constructor-arg value="M6" index="0" type="java.lang.String" name="name" />
			<constructor-arg value="xiaomi" index="1" type="java.lang.String" name="brand" />
			<constructor-arg value="2499.00" index="2" type="java.lang.Double" name="price" />
		</bean>
		
		<!-- 
			使用 util schema 里的集合标签定义独立的集合 Bean 
			首先要在 <beans> 根元素里添加 util schema 定义
				xmlns:util="http://www.springframework.org/schema/util"
				xsi:schemaLocation="http://www.springframework.org/schema/util
					http://www.springframework.org/schema/util/spring-util-4.0.xsd"
		 -->
		<util:map id="experience">
			<entry key="past" value="dongtai" />
			<entry key="now" value="suzhou" />
			<entry key="future" value="hangzhou" />
			<!-- 
			<entry key-ref="" value-ref="" />
			 -->
		</util:map>
		
		<!-- 使用 p 命名空间，简化代码，引用其他 Bean 时：P:属性-ref="" -->
		<bean id="iPhone" class="com.ioc.Phone" p:name="iPhone X" p:brand="Apple" p:price="8388" lazy-init="true" />
		
		<!-- 配置的继承 -->
		<bean id="mix2-s" parent="phone" lazy-init="true">
			<property name="name" value="Mix2-s" />
		</bean>
		
		<!-- 使用外部属性文件来配置 -->
		<!-- 
			首先通过 <context:property-placeholder> 标签引入配置文件；
			然后使用${}来获取相应的值
		 -->
		<context:property-placeholder location="classpath:/com/ioc/data.properties"/>
		<bean id="oppo" class="com.ioc.Phone" lazy-init="true">
			<property name="name" value="${name}" />
			<property name="brand" value="${brand}" />
			<property name="price" value="${price}" />
		</bean>
		
		<!-- 
			SpEL: 可以为属性进行动态的赋值
			语法： #{}
			1. 用来获取别的Bean的属性和方法；
			2. 支持常用的运算符；
			3. 支持三目运算符(? :)；
			4. 调用静态方法或静态属性；
		 -->
		 <bean id="vivo" class="com.ioc.Phone" lazy-init="true">
			<property name="name" value="#{'vivo' + ' X11'}" />
			<property name="brand" value="#{oppo.brand}" />
			<property name="price" value="#{3000 + (T(java.lang.Math).random() * 100)}" />
		 </bean>
		 
		 <!-- 配置Bean后置处理器，针对该容器的所有Bean -->
		 <bean class="com.ioc.MyBeanPostProcessor" />
		 
		 <!-- 
			使用工厂方法来配置
			factory:工厂实例，静态工厂模式无需此属性;
			factory-method:相对的工厂方法;
		  -->
		 <!-- 使用静态工厂方法 -->
		 <bean id="nokia" class="com.ioc.Factory" factory-method="getStaticInstance" lazy-init="true">
			<!-- 通过<constructor-arg>来传递参数 -->
			<constructor-arg value="NOKIA" />
		 </bean>
		 
		 <!-- 使用实例工厂方法 -->
		 <!-- 创建工厂实例 -->
		 <bean id="factory" class="com.ioc.Factory" />
		 <!-- 配置实例 -->
		 <bean id="blackBerry" class="com.ioc.Phone" 
			factory-bean="factory" factory-method="getInstance" lazy-init="true">
			<constructor-arg value="BlackBerry" />
		 </bean>
		 
		 <!-- 
			使用spring提供的FactoryBean 接口来配置
			class:指定实现了FactoryBean 的类;
			<property>:给FactoryBean 的实现类配置属性值;
			实例是FactoryBean 的getObject() 的返回值
			 -->
		 <bean id="samsung" class="com.ioc.PhoneFactoryBean" lazy-init="true">
			<property name="name" value="samsung" />
		 </bean>

	</beans>
Class:
	public class Main {

		public static void main(String[] args) {
			ApplicationContext context = new ClassPathXmlApplicationContext("/com/ioc/Beans.xml");
			System.out.println();
			//可通过类名来获取实例，但该类的实例在该容器中有且只有一个
	//		Person person = (Person) context.getBean(Person.class);
	//		System.out.println(person);
			
	//		Phone phone = (Phone) context.getBean("phone");
	//		System.out.println(phone);
			
	//		Phone iPhone = (Phone) context.getBean("iPhone");
	//		System.out.println(iPhone);
			
	//		Phone mix2s = (Phone) context.getBean("mix2-s");
	//		System.out.println(mix2s);
			
	//		Phone oppo = (Phone) context.getBean("oppo");
	//		System.out.println(oppo);
			
	//		Phone vivo = (Phone) context.getBean("vivo");
	//		System.out.println(vivo);
			
	//		Phone nokia = (Phone) context.getBean("nokia");
	//		System.out.println(nokia);
	//		Phone blackBerry = (Phone) context.getBean("blackBerry");
	//		System.out.println(blackBerry);
			
	//		Phone samsung = (Phone) context.getBean("samsung");
	//		System.out.println(samsung);

			((AbstractApplicationContext)context).close();
		}

	}

	public class Person {

		private String name;
		private Integer age;
		private Phone phone;
		private List<String> lovers;
		private Map<String, String> experience;
		
		public Person() {
			System.out.println("Person default constructor.");
		}
		
		public Person(String name) {
			this.name = name;
		}
		
		public void init() {
			System.out.println("Person init..");
		}
		
		public void destory() {
			System.out.println("Person destory..");
		}
	}
		
	public class Phone {
		
		private String name;
		private String brand;
		private Double price;
		
		public Phone() {
			System.out.println("Phone default constructor.");
		}
		
		public Phone(String name, String brand, Double price) {
			super();
			System.out.println("Phone custom constructor.");
			this.name = name;
			this.brand = brand;
			this.price = price;
		}
	}

	public class Factory {

		public static Phone getStaticInstance(String name) {
			return new Phone(name, "phone", Math.random()*500 + 3000);
		}
		
		public Phone getInstance(String name) {
			return new Phone(name, "phone", Math.random()*500 + 10000);
		}
		
	}

	public class MyBeanPostProcessor implements BeanPostProcessor {

		@Override
		public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
			if (bean instanceof Person) {
				System.out.println("Person before init..");
			}
			return bean;
		}
		
		@Override
		public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
			if (bean instanceof Person) {
				System.out.println("Person after init..");
			}
			return bean;
		}
		
	}

	public class PhoneFactoryBean implements FactoryBean<Phone> {
		
		private String name;

		@Override
		public Phone getObject() throws Exception {
			return new Phone(name, "phone", 999.00);
		}

		@Override
		public Class<?> getObjectType() {
			return Phone.class;
		}

	}

data.properties
	name=OPPO-R11
	brand=BBK
	price=3299.00
	
	
	
	
	
基于注解的形式
	Demo(Spring_study项目的com.ioc.annotations包)
		<!-- 
			使用注解的方式配置Bean
			1.使用 <context:component-scan> 标注需要扫描的注解包；
				base-package:需要扫描的基包，在该包下的子包都会扫描，支持*、?通配符;
			2.在Class 中使用如下的注解来标识需要扫描的类，可在注解后面用()表明Bean的id值，默认为类名的首字母小写
				@Component: 基本注解, 标识了一个受 Spring 管理的组件;
				@Repository: 标识持久层组件;
				@Service: 标识服务层(业务层)组件;
				@Controller: 标识表现层组件;
			3.在Class 中使用 @Autowired 和 @Resource 来实现Bean之间的依赖关系
				 @Autowired：自动装配具有兼容类型的单个 Bean属性，
					required: 表明是否必须匹配(默认true)，
					@Qualifier: 当有多个兼容类型的Bean 时可用该注解表明具体的Bean名称，
					使用在Arrays 和List上时自动装配所有兼容的Bean，
					使用在Map上时，key=Bean名称，value=Bean；
				 @Resource: 注解要求提供一个 Bean 名称的属性，若该属性为空，则自动采用标注处的变量或方法名作为 Bean 的名称；
		 -->
		<context:component-scan base-package="com.ioc.annotations" />

		public class Main {
			public static void main(String[] args) {
				AbstractApplicationContext context = new ClassPathXmlApplicationContext("/com/ioc/annotations/Beans.xml");
				EmployeeController employeeController = (EmployeeController) context.getBean("employeeController");
				employeeController.execute();
				context.close();
			}
		}

		@Component("employee")
		class Employee {
			public void show() {System.out.println("Employee show..");}
		}

		@Controller
		class EmployeeController {
			@Autowired
			private Employee employee;
			@Resource(name="employeeService")
			private EmployeeService employeeService;
			@Resource
			private EmployeeDao employeeDao;
			public void execute() {
				System.out.println("EmployeeController execute..");
				employee.show();
				employeeService.save();
				employeeDao.save();
			}
		}

		interface EmployeeDao {
			void save();
		}

		@Repository
		class EmployeeDaoImpl implements EmployeeDao {
			@Override
			public void save() {System.out.println("EmployeeDaoImpl save..");}
		}

		@Service
		class EmployeeService {
			public void save() {System.out.println("EmployeeService save..");}
		}

泛型依赖注入
	Demo(Spring_study项目的com.ioc.annotations.generic包)
		public class Main {

			@SuppressWarnings("unchecked")
			public static void main(String[] args) {
				AbstractApplicationContext context = new ClassPathXmlApplicationContext("/com/ioc/annotations/generic/Beans.xml");
				BaseService<User> baseService = (BaseService<User>) context.getBean("baseService");
				/*
				 * 泛型依赖注入
				 * 泛型指定为 User 后，容器会根据泛型来装配相应的Bean
				 */
				baseService.save();
				context.close();
				/* 输出：
				 BaseService save..
				 BaseDao save..
				 UserDao save..
				 */
			}
		}
		@Service
		class BaseService<T> {
			@Autowired
			public BaseDao<T> baseDao;
			
			public void save() {
				System.out.println("BaseService save..");
				baseDao.save();
			}
		}

		class BaseDao<T> {
			public void save() {System.out.println("BaseDao save..");}
		}

		@Repository
		class UserDao extends BaseDao<User> {
			@Override
			public void save() {
				super.save();
				System.out.println("UserDao save..");
			}
		}

		class User {}	
	
	
	
	
	
	
	