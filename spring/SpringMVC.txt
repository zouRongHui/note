
1. 在springMVC中主要掌控者是DispatcherServlet，
具体流程：
	1).前端发送请求到DispatcherServlet前端控制器；
	2).DispatcherServlet调用HandlerMapping处理器映射器，去查找相应的Handler（可根据xml配置、注解查找）；
	3).HandlerMapping返回返回一个HandlerExecutionChain对象(包含一个Handler处理器和多个HandlerIntercepter处理器拦截器）给DispatcherServlet；
	4).DispatcherServlet调用HandlerAdapter处理配适器，去执行相应的Handler；
	5).HandlerAdapter调用具体的Handler；
	6).Handler处理完后返回一个ModelAndView视图模型给HandlerAdapter；
	7).HandlerAdapter返回ModelAndView给DispatcherServlet；
	8).DispatcherServlet调用ViewResolver视图解析器，去解析具体的视图；
	9).ViewResolver返回具体的View给DispatcherServlet；
	10).DispatcherServlet渲染View，填充需要的数据；
	11).DispatcherServlet响应客户。
	
2. Demo
1).导入jar包
	aop、beans、context、core、expression、commons-logging、web、webmvc
	
2).web.xml
	****************************************
  
  <!-- 配置DispatcherServlet前端控制器 -->
  <servlet>
    <servlet-name>springDispatcherServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!-- 配置DispatcherServlet的一个初始化参数：指明springMVC配置文件的位置和名称 -->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:springmvc.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>springDispatcherServlet</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>
  
  <!-- 添加一个编码的过滤器将编码统一为UTF-8 -->
  <filter>
    <filter-name>CharacterEncodingFilter</filter-name>
      <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>utf-8</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>CharacterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  
	****************************************
	
3).配置文件springmvc.xml
	****************************************
	<!-- 配置自定义扫面包 -->
	<context:component-scan base-package="com.rone.springmvc"></context:component-scan>

	<!-- 配置ViewResolver视图解析器：如何将handler方法返回值解析为实际的物理视图,效果为"prefix"+returnVal+"suffix" -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<!-- 设置拦截器 -->
	<mvc:interceptors>
		<!-- 具体某个拦截器 -->
		<mvc:interceptor>
			<!-- 该拦截器拦截的请求 -->
			<mvc:mapping path="/rone/*"/>
			<!-- 该拦截器忽略的请求 -->
			<mvc:exclude-mapping path="/rone/error"/>
			<!-- 具体的拦截器类，需要实现 org.springframework.web.servlet.HandlerInterceptor -->
			<bean class="com.rone.springmvc.interceptor.Interceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	****************************************
	
4).Handler语法：
	处理方法参数支持POJO类的映射，根据请求参数名和POJO属性名自动进行装配，支持级联属性
		eg.
		@RequestMapping("/testPOJO")
		public String testPOJO(User user) {
			System.out.println("testPOJO_User: " + user);
			return "success";
		}
	处理方法参数可使用Servlet原生的API作为参数
		可以接受HttpServletRequest、HttpServletResponse、HttpSession、java.security.Principal、Local、
		InputStream、OutputStream、Reader、Writer作为参数
		eg.
		@RequestMapping("/testServletAPI")
		public void testServletAPI(HttpServletRequest req, HttpServletResponse resp, Writer writer) throws IOException {
			System.out.println("testServletAPI: " + req +", " + resp);
			writer.write("hello world!");
		}
		
	SpringMVC提供一下几种途径输出模型数据：
		①. ModelAndView:处理方法返回值类型为ModelAndView时，方法体即可通过返回对象添加数据模型。
			****************************************
			//目标方法的返回值可以是ModelAndView类型。
			//其中可以包含视图和模型数据
			//SpringMVC会把ModelAndView对象中的数据放入到request域对象中。
			@RequestMapping("/testModelAndView")
			public ModelAndView testModelAndView() {
				String viewName = "success";
				ModelAndView mv = new ModelAndView(viewName);
				mv.addObject("time", new Date());
				return mv;
			}
			****************************************
		②. Map及Model:入参为org.springframework.ui.Model、org.springframework.ui.ModelMap或java.uti.Map时，
			处理方法返回时，Map中的数据会自动添加到模型中。这里的Map作用域好像是session(实测)
			****************************************
			//目标方法可以添加Map(或Model、ModelMap)类型的参数
			@RequestMapping("/testMap")
			public String testMap(Map<String, Object> map) {
				map.put("time", new Date());
				return "success";
			}
			****************************************
		③. @SessionAttributes:将模型中的某个属性暂存到HttpSession中，以便多个请求之间可以共享这个属性
			该注解只能修饰类，value属性用于指定需要共享的属性名，types属性用于指定对象类型
			****************************************
			@SessionAttributes(value="user", types=User.class)
			public class HelloWorld {
				//@SessionAttributes用于将数据置入session
				@RequestMapping("/testSessionAttributes")
				public String testSessionAttributes(Map<String, Object> map) {
					User user = new User("rone", "123", "9@rone.com", "18015564912");
					map.put("user", user);
					map.put("others", "it is me!");
					return "success";
				}
			}
			****************************************
		④. @ModelAttribute:方法入参标注该注解后，入参的对象就会放到数据模型中
			****************************************
			//使用@ModelAttribute后，会在每个handler方法执行前执行
			//运行流程：1.执行@ModelAttribute修饰的方法，将数据置入Map中
			//			2.SpringMVC从Map中取出对象，并将请求参数赋值给该对象相应的属性
			//			3.SpringMVC将上诉对象传入目标方法的参数
            //tips：
            //	1.多个@ModelAttribute顺序执行
            //	2.@ModelAttribute不可添加在已有@RequestMapping注解的方法上，不然已有的请求会报404
			//注意：在@ModelAttribute修饰的方法中，置入Map时键需要和目标方法的参数的类型的小写一致
			@ModelAttribute
			public void getUser(@RequestParam("username") String username, Map<String, Object> map) {
				if (username != null) {
					User user = new User("rone", "123456", "rone@rone.com", "18015564912");
					System.out.println("get data: " + user);
					map.put("user", user);
				}
			}
			
			@RequestMapping("/testModelAttributes")
			public String testModelAttributes(User user) {
				System.out.println("new data: " + user);
				return "success";
			}
			****************************************

5). 拦截器语法
	需要实现 org.springframework.web.servlet.HandlerInterceptor 接口；
	在spring的配置文件中声明；
	preHandle():在调用业务方法或者下一个拦截器之前执行，return true 时会继续执行业务方法或者下一个拦截器方法，return false 时则不会继续执行;
	postHandle():在业务方法之后，渲染视图之前执行;
	afterCompletion():渲染视图之后执行;
	eg.
	springmvc.xml
	<!-- 设置拦截器 -->
	<mvc:interceptors>
		<!-- 具体某个拦截器 -->
		<mvc:interceptor>
			<!-- 该拦截器拦截的请求 -->
			<mvc:mapping path="/rone/*"/>
			<!-- 该拦截器忽略的请求 -->
			<mvc:exclude-mapping path="/rone/error"/>
			<!-- 具体的拦截器类，需要实现 org.springframework.web.servlet.HandlerInterceptor -->
			<bean class="com.rone.springmvc.interceptor.Interceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	Class
	public class Interceptor implements HandlerInterceptor {

		/**
		 * 在调用业务方法或者下一个拦截器之前执行
		 * return true 时会继续执行业务方法或者下一个拦截器方法
		 * return false 时则不会继续执行
		 */
		@Override
		public boolean preHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2) throws Exception {
			System.out.println("在调用业务方法或者下一个拦截器之前执行..." + arg0.getRequestURL());
			Integer seconds = Calendar.getInstance().get(Calendar.SECOND);
			if (seconds % 2 == 0) {
				return true;
			} else {
				arg1.sendRedirect("error");			
				return false;
			}
		}

		/**
		 * 在业务方法之后，渲染视图之前执行
		 */
		@Override
		public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3) throws Exception {
			System.out.println("在业务方法之后，渲染视图之前执行");
		}

		/**
		 * 渲染视图之后执行
		 */
		@Override
		public void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3) throws Exception {
			System.out.println("渲染视图之后执行");
		}

	}
	
3.solutions
1). 日期格式数据的处理
	①. springmvc接收date类型参数
		在需要由string转Date的字段上加上org.springframework.format.annotation.DateTimeFormat注解,pattern参数为日期数据格式。
			@DateTimeFormat(pattern="yyyy-MM-dd")
			private Date actionDate;
	②. 返回日期数据时，若是以json格式返回的
		I. 在日期属性上添加com.fasterxml.jackson.annotation.JsonFormat注解，pattern为返回的日期格式，timezone为时区。
			@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
			private Date date2;
		II.使用自定义的json转换解析规则，这个方法不仅适用于日期数据，也适用于其他需要手动转换的数据。
			在日期属性上添加com.fasterxml.jackson.databind.annotation.JsonSerialize注解，using为使用怎样的json转换规则
			@JsonSerialize(using = DateJsonSerializer.class)
			private Date date;
			
			import com.fasterxml.jackson.core.JsonGenerator;
			import com.fasterxml.jackson.databind.JsonSerializer;
			import com.fasterxml.jackson.databind.SerializerProvider;
			import java.io.IOException;
			import java.text.SimpleDateFormat;
			import java.util.Date;
			/**
			 * Created by zouRongHui on 2018/6/7.
			 * Json格式下的Date格式转换
			 */
			public class DateJsonSerializer extends JsonSerializer<Date> {

				@Override
				public void serialize(Date date, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)
						throws IOException {
					SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy年MM月dd日 HH:mm:ss");
					jsonGenerator.writeString(simpleDateFormat.format(date));
				}
			}
	

	