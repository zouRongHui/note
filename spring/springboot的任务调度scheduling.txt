
1. 基于spring-boot，无需一如额外的jar包

2. 启动类使用 @EnableScheduling 注解，标明支持scheduling

3. 实现
1). 简单的单线程任务调度
eg.
    /**
     * 单线程执行，当上一次任务没完成时，下一次任务是不会触发的
     */
    @Component
    public class EasyJob {

        @Scheduled(cron = "0/5 * * * * ?")
        public void easyJob() {
            System.out.println("简单的单线程任务" + new Date());
            try {
                Thread.sleep(6000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
    
2). 多线程任务调度
eg.
    /**
     * 多线程的任务，每次都会额外开启一个线程去执行任务，不管上一次任务有没有完成
     */
    @Component
    public class TimerJob implements SchedulingConfigurer {

        @Override
        public void configureTasks(ScheduledTaskRegistrar scheduledTaskRegistrar) {
            scheduledTaskRegistrar.addTriggerTask(() -> {
                System.out.println("==============开始定时任务============");
                //定时任务
                try {
                    System.out.println("休眠3秒钟");
                    Thread.sleep(3000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println("==============定时任务完成============");
            }, triggerContext -> {
                //遵循cornTrigger规则
                String cron = "0/5 * * * * ?";
                CronTrigger cronTrigger = new CronTrigger(cron);
                Date nextTime = cronTrigger.nextExecutionTime(triggerContext);
                System.out.println("下次执行任务的时间是： " + nextTime);

                return nextTime;
            });
            //可以同时添加多个任务
            scheduledTaskRegistrar.addTriggerTask(() -> {
                System.out.println("==============开始第二个任务============");
                //定时任务
                try {
                    System.out.println("休眠1分钟");
                    Thread.sleep(60000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println("==============第二个任务完成============");
            }, triggerContext -> {
                String cron = "0 0/3 * * * ?";
                CronTrigger cronTrigger = new CronTrigger(cron);
                Date nextTime = cronTrigger.nextExecutionTime(triggerContext);
                System.out.println("下次执行第二个任务的时间是： " + nextTime);

                return nextTime;
            });
        }
    }