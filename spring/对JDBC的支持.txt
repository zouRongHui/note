Demo：Spring_study的com.jdbc.
spring对JDBC做了进一步的集成
Demo：
	引入相关的数据源包，例c3p0
	c3p0-0.9.1.2.jar
xml：
	<!-- 配置 C3P0 数据源 -->
	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="root"></property>
		<property name="password" value="root"></property>
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/test"></property>
		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>

		<property name="initialPoolSize" value="5"></property>
		<property name="maxPoolSize" value="10"></property>
	</bean>
	
	<!-- 配置 Spirng 的 JdbcTemplate -->
	<bean id="jdbcTemplate" 
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 配置 NamedParameterJdbcTemplate, 该对象可以使用具名参数, 其没有无参数的构造器, 所以必须为其构造器指定参数 -->
	<bean id="namedParameterJdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="dataSource"></constructor-arg>	
	</bean>
	
class：
	public static void main(String[] args) {
		ApplicationContext context = new ClassPathXmlApplicationContext("/com/jdbc/application-jdbc.xml");
		String sql = null;
		JdbcTemplate jdbcTemplate = (JdbcTemplate) context.getBean("jdbcTemplate");
		
		//JdbcTemplate 查询单个结果
		sql = "SELECT * FROM employee WHERE id = ?";
		RowMapper<Employee> rowMapper = new BeanPropertyRowMapper<>(Employee.class);
		Employee employee = jdbcTemplate.queryForObject(sql, rowMapper, 1);
		System.out.println(employee);
		
		//JdbcTemplate 多个结果的查询
		sql = "SELECT * FROM employee";
		List<Employee> employeeList = jdbcTemplate.query(sql, rowMapper);
		System.out.println(employeeList);
		
		//JdbcTemplate 单个SQL语句的增删改
		sql = "UPDATE employee SET name = ? WHERE id = ?";
		jdbcTemplate.update(sql, "Jack", 1);
		
		//JdbcTemplate 批量操作SQL语句
		sql = "INSERT INTO employee(id,name,email) VALUES(?,?,?)";
		List<Object[]> objList = new ArrayList<Object[]>(2);
		objList.add(new Object[] {3, "Rose", "Rose@foxmail.com"});
		objList.add(new Object[] {4, "Lucy", "Lucy@foxmail.com"});
		jdbcTemplate.batchUpdate(sql, objList);
		
		//JdbcTemplate 查询单个属性或做统计
		sql = "SELECT COUNT(1) FROM employee";
		Long count = jdbcTemplate.queryForObject(sql, Long.class);
		System.out.println("Count: " + count);
		
		//NamedParameterJdbcTemplate 可使用具名参数，便于代码维护
		NamedParameterJdbcTemplate namedParameterJdbcTemplate = context.getBean(NamedParameterJdbcTemplate.class);
		sql = "UPDATE employee SET name = :name WHERE id = :id";
		Map<String, Object> paramMap = new HashMap<>(2);
		paramMap.put("name", "King");
		paramMap.put("id", 4);
		namedParameterJdbcTemplate.update(sql, paramMap);
		
		//NamedParameterJdbcTemplate 当SQL中的参数名和POJO中的属性名一致时，可直接使用POJO进行SQL操作
		sql = "INSERT INTO employee(name,email) VALUES(:name,:email)";
		Employee newEmployee = new Employee("Queen", "Queen@foxmail.com");
		SqlParameterSource paramSource = new BeanPropertySqlParameterSource(newEmployee);
		namedParameterJdbcTemplate.update(sql, paramSource);
		
		((AbstractApplicationContext)context).close();
	}
	