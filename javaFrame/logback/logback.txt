0. 参考 https://www.cnblogs.com/warking/p/5710303.html

1. maven配置
    <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
        <version>1.7.25</version>
    </dependency>
    <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-core</artifactId>
        <version>1.2.3</version>
    </dependency>
    <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>1.2.3</version>
    </dependency>

3. demo
    public class LogBackTest {
        private static org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(LogBackTest.class);
        public static void main(String[] args) {
            logger.debug("logback的debug级别日志");
            logger.info("logback的info级别日志");
            logger.warn("logback的warn级别日志");
            logger.error("logback的error级别日志");
        }
    }

2. 如果配置文件 logback-test.xml 和 logback.xml 都不存在，那么 logback 默认地会调用BasicConfigurator ，
    创建一个最小化配置。最小化配置由一个关联到根 logger 的ConsoleAppender 组成。
    输出用模式为%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n 的 PatternLayoutEncoder 进行格式化。root logger 默认级别是 DEBUG。
logback.xml配置详解
    <?xml version="1.0" encoding="utf-8" ?>
    <!--根节点<configuration>，包含下面三个属性：
        scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
        scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
        debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
    <configuration scan="true" scanPeriod="60 seconds" debug="false">
        <!--子节点<contextName>：用来设置上下文名称，每个logger都关联到logger上下文，默认上下文名称为default。
            但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。-->
        <contextName>logbackTest</contextName>

        <!--子节点<property> ：用来定义变量值，它有两个属性name和value，通过<property>定义的值会被插入到logger上下文中，可以使“${}”来使用变量。
        　　　　name: 变量的名称
        　　　　value: 的值时变量定义的值-->
        <property name="filePath" value="/home/log/java_study" />

        <!--子节点<timestamp>：获取时间戳字符串，他有两个属性key和datePattern
        　　　　key: 标识此<timestamp> 的名字；
        　　　　datePattern: 设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式-->
        <timestamp key="dateFormat" datePattern="yyyy-MM-dd HH:mm:ss"/>

        <property name="messageFormat" value="%d{${dateFormat}} [%thread] %-5level %logger - %msg%n"></property>

        <!--子节点<appender>：负责写日志的组件，它有两个必要属性name和class。
            name指定appender名称，class指定appender的全限定名-->
        <!--ConsoleAppender 把日志输出到控制台-->
        <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
            <!--对日志进行格式化-->
    　  　　<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                <Pattern>
                    ${messageFormat}
                </Pattern>
    　  　　</encoder>
            <!--<layout class="ch.qos.logback.classic.PatternLayout">-->
                <!--<Pattern>-->
                    <!--%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n-->
                <!--</Pattern>-->
            <!--</layout>-->
    　  </appender>

        <!--FileAppender：把日志添加到文件-->
        <appender name="file" class="ch.qos.logback.core.FileAppender">
            <!--被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。-->
            <file>${filePath}/all.log</file>
            <!--如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。-->
            <append>true</append>
            <!--对记录事件进行格式化-->
            <!--对记录事件进行格式化。负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流。
            PatternLayoutEncoder 是唯一有用的且默认的encoder。-->
            <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                <!--用来设置日志的输入格式。使用“%”加“转换符”方式，如果要输出“%”，则必须用“\”对“\%”进行转义。-->
                <Pattern>
                    %d{${dateFormat}} [%thread] %-5level %logger - %msg%n
                </Pattern>
            </encoder>
            <!--如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。-->
            <prudent>false</prudent>
        </appender>

        <!--RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件-->
        <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!--如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。-->
            <append>true</append>
            <!--过滤器，只记录ERROR级别的日志-->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>ERROR</level>
                <!--大小写敏感-->
                <onMatch>ACCEPT</onMatch>
                <!--大小写敏感-->
                <onMismatch>DENY</onMismatch>
            </filter>
            <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                <Pattern>
                    %d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger - %msg%n
                </Pattern>
            </encoder>
            <!--:当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。属性class定义具体的滚动策略类-->
            <!--TimeBasedRollingPolicy：最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动-->
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <!--必要节点，包含文件名及“%d”转换符，“%d”可以包含一个java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。如果直接使用 %d，默认格式是 yyyy-MM-dd。-->
                <!--RollingFileAppender的file字节点可有可无，通过设置file，可以为活动文件和归档文件指定不同位置，当前日志总是记录到file指定的文件（活动文件），活动文件的名字不会改变；-->
                <!--如果没设置file，活动文件的名字会根据fileNamePattern 的值，每隔一段时间改变一次。“/”或者“\”会被当做目录分隔符。-->
                <fileNamePattern>${filePath}/%d{yyyy-MM}/%d{dd}号_error.log</fileNamePattern>
                <!--可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除-->
                <!--由于文件路径格式为 /home/log/java_study/"年-月"/java_study_"天".log 故此处归档文件单位为月，下列配置表示你保留12个月的日志-->
                <maxHistory>12</maxHistory>
            </rollingPolicy>
        </appender>

        <appender name="logbackService" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                <Pattern>${messageFormat}</Pattern>
            </encoder>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${filePath}/%d{yyyy-MM}/%d{dd}号_logbackservice.log</fileNamePattern>
                <maxHistory>12</maxHistory>
            </rollingPolicy>
        </appender>

        <!--子节点<logger>：用来设置某一个包或具体的某一个类的日志打印级别、以及指定<appender>。
            <logger>仅有一个name属性(指定包名\类名)，一个可选的level和一个可选的addtivity属性。
                name: 用来指定受此loger约束的某一个包或者具体的某一个类。
        　　　　level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL和OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。 如果未设置此属性，那么当前loger将会继承上级的级别。
                addtivity: 是否向上级loger传递打印信息。默认是true。
            可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger-->
        <!--org.rone.study.java.third包下默认输出info级别的日志-->
        <logger name="org.rone.study.java.third" level="info"></logger>

        <!--org.rone.study.java.third.logback.LogBackService类只会输出error级别的日志-->
        <logger name="org.rone.study.java.third.logback.LogBackService" level="warn">
            <!--配置在这里的<appender>只会记录name所指定的包/类的日志-->
            <appender-ref ref="logbackService"></appender-ref>
        </logger>

        <!--也是<logger>元素，但是它是根logger,是所有<logger>的上级。只有一个level属性，因为name已经被命名为"root",且已经是最上级了-->
    　  <root level="DEBUG">
            <!--配置在这里的<appender>会记录整个项目的日志-->
            <appender-ref ref="console"></appender-ref>
            <appender-ref ref="file"></appender-ref>
            <appender-ref ref="error"></appender-ref>
    　  </root>

        <!--还有SocketAppender、SMTPAppender、DBAppender、SyslogAppender、SiftingAppender，并不常用-->
        <!--参考官方文档（http://logback.qos.ch/documentation.html）-->

    </configuration>