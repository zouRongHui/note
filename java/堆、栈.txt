
1.堆、栈(也叫堆栈)，是JVM用来存放数据的。

2.栈，存放的数据要指明其数据大小和生存周期，相应的代码执行结束，内存就会被释放。
  堆，无需指明，由系统在合适的时候自动回收。
  
3.栈，存放基本数据类型的数据和变量的引用。
  堆，存放具体的变量内容。
  
4.栈，里面的数据共享，
	int i = 3;//栈首先会查看有没有 3 这个数据，没有就创建一个 3 ，并将i指向他。
	int j = 4;//创建一个 4 数据将指向。
	int k = 3;//栈检查到已有 3 ，直接将 k 指向了3.
	i = 5;//这里并不是将i指向的 3 修改为 5 ，而是在栈中检查有没有 5 ，没有的话就创建一个并指向，k的值还是 5 。
	i = 4;//检查到有 4 ，直接指向。
  堆，各管各的。
  
5.在JAVA中，有六个不同的地方可以存储数据： 
	1). 寄存器（register）。这是最快的存储区，因为它位于不同于其他存储区的地方——处理器内部。
		但是寄存器的数量极其有限，所以寄存器由编译器根据需求进行分配。你不能直接控制，也不能在程序中感觉到寄存器存在的任何迹象。 
	2). 堆栈（stack）。位于通用RAM中，但通过它的“堆栈指针”可以从处理器哪里获得支持。堆栈指针若向下移动，则分配新的内存；
		若向上移动，则释放那些 内存。这是一种快速有效的分配存储方法，仅次于寄存器。
		创建程序时候，JAVA编译器必须知道存储在堆栈内所有数据的确切大小和生命周期，因为它必须生成 相应的代码，以便上下移动堆栈指针。
		这一约束限制了程序的灵活性，所以虽然某些JAVA数据存储在堆栈中——特别是对象引用，但是JAVA对象不存储其 中。 
	3). 堆（heap）。一种通用性的内存池（也存在于RAM中），用于存放所以的JAVA对象。
		堆不同于堆栈的好处是：编译器不需要知道要从堆里分配多少存储区 域，也不必知道存储的数据在堆里存活多长时间。
		因此，在堆里分配存储有很大的灵活性。当你需要创建一个对象的时候，只需要new写一行简单的代码，当执行 这行代码时，会自动在堆里进行存储分配。
		当然，为这种灵活性必须要付出相应的代码。用堆进行存储分配比用堆栈进行存储存储需要更多的时间。 
	4). 静态存储（static storage）。这里的“静态”是指“在固定的位置”。静态存储里存放程序运行时一直存在的数据。
		你可用关键字static来标识一个对象的特定元素是静态的，但JAVA对象本身从来不会存放在静态存储空间里。 
	5). 常量存储（constant storage）。常量值通常直接存放在程序代码内部，这样做是安全的，因为它们永远不会被改变。
		有时，在嵌入式系统中，常量本身会和其他部分分割离开，所以在这种情况下，可以选择将其放在ROM中 
	6). 非RAM存储。如果数据完全存活于程序之外，那么它可以不受程序的任何控制，在程序没有运行时也可以存在。 

	就速度来说，有如下关系： 
	寄存器 < 堆栈 < 堆 < 其他 