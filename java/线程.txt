1.进程、线程
		进程：每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销，一个进程包含1--n个线程。（进程是资源分配的最小单位）
		线程：同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器(PC)，线程切换开销小。（线程是cpu调度的最小单位）
2.线程类实现方法
	继承Thread
	实现Runnable
3.实现Runnable接口比继承Thread类所具有的优势：
	1）：适合多个相同的程序代码的线程去处理同一个资源
	2）：可以避免java中的单继承的限制
	3）：增加程序的健壮性，代码可以被多个线程共享，代码和数据独立
	4）：线程池只能放入实现Runable或callable类线程，不能直接放入继承Thread的类
4.常用API
	sleep(): 强迫一个线程睡眠Ｎ毫秒。
	join(): 等待线程终止。 在A线程中调用了B线程的join()方法，A一定在B死后才销毁。
	yield(): 暂停当前正在执行的线程对象，让出CPU资源。将线程从运行状态转到可运行状态，接下来可能还是继续运行该线程。
	setPriority(): 更改线程的优先级。供10级，建议使用如下的层级MIN_PRIORITY = 1、NORM_PRIORITY = 5、MAX_PRIORITY = 10。
	wait(): 强迫一个线程等待。wait()会释放所拥有的对象锁。
	notify(): 通知一个线程继续运行。
		Obj.wait(),Obj.notify必须在synchronized(Obj){...}语句块内。
	currentThread(): 得到当前线程。
	setDaemon(): 设置一个线程为守护线程。
5.守护线程
	在Java中有两类线程：User Thread(用户线程)、Daemon Thread(守护线程)
	Daemon的作用是为其他线程的运行提供服务。
		其实User Thread线程和Daemon Thread守护线程本质上来说去没啥区别的，
		唯一的区别之处就在虚拟机的离开：如果User Thread全部撤离，
		那么Daemon Thread也就没啥线程好服务的了，所以虚拟机也就退出了。
	用户可以自行的设定守护线程，方法：public final void setDaemon(boolean on);
	有几点需要注意：
	1）、thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。
		你不能把正在运行的常规线程设置为守护线程。
	2）、在Daemon线程中产生的新线程也是Daemon的。
	3）、不是所有的应用都可以分配给Daemon线程来进行服务，比如读写操作或者计算逻辑。
		因为在Daemon Thread还没来的及进行操作时，虚拟机可能已经退出了。