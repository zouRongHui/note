
1.抽象工厂模式适用于多个产品配套使用的情况
	例如短袖(上衣)配短裤(下衣)、羽绒服(上衣)配保暖裤(下衣)，如果是短袖配保暖裤或者羽绒服配短裤，要么中暑要么感冒
	例如AK47(武器)用子弹()、弓(武器)
	
2.语法
public class Test {
	public static void main(String[] args) {
		//夏装，短袖配短裤
		ClothingFactory clothingFactory = new SummerFactory();
		Clothes clothes = clothingFactory.gainClothes();
		Trousers trousers = clothingFactory.gainTrousers();
		clothes.wearClothes();
		trousers.wearTrousers();
		System.out.println();
		//冬装，羽绒服配保暖裤
		clothingFactory = new WinterFactory();
		clothes = clothingFactory.gainClothes();
		trousers = clothingFactory.gainTrousers();
		clothes.wearClothes();
		trousers.wearTrousers();
		/*
		this is short sleeve.
		this is shorts.
		
		this is down jacket.
		this is warm pants.
		 */
	}
}
/**
 * 上衣
 */
interface Clothes {
	void wearClothes();
}
/**
 * 裤子
 */
interface Trousers {
	void wearTrousers();
}
/**
 * 短袖
 */
class ShortSleeve implements Clothes {
	@Override
	public void wearClothes() {
		System.out.println("this is short sleeve.");
	}
}
/**
 * 羽绒服
 */
class DownJacket implements Clothes {
	@Override
	public void wearClothes() {
		System.out.println("this is down jacket.");
	}
}
/**
 * 短裤
 */
class Shorts implements Trousers {
	@Override
	public void wearTrousers() {
		System.out.println("this is shorts.");
	}
}
/**
 * 保暖裤
 */
class WarmPants implements Trousers {
	@Override
	public void wearTrousers() {
		System.out.println("this is warm pants.");
	}
}
/**
 * 服装工厂，生产上衣和裤子
 */
interface ClothingFactory {
	Clothes gainClothes();
	Trousers gainTrousers();
}
/**
 * 夏装工厂，只生产短袖和短裤
 */
class SummerFactory implements ClothingFactory {
	@Override
	public Clothes gainClothes() {
		return new ShortSleeve();
	}
	@Override
	public Trousers gainTrousers() {
		return new Shorts();
	}
}
/**
 * 冬装工厂，只生产羽绒服和保暖裤
 */
class WinterFactory implements ClothingFactory {
	@Override
	public Clothes gainClothes() {
		return new DownJacket();
	}
	@Override
	public Trousers gainTrousers() {
		return new WarmPants();
	}
}