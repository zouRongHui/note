
需要的css：
bootstrap.min.css
bootstrapValidator.min.css

需要的js:
jQuery-1.10.2.min.js
bootstrap.min.js
bootstrapValidator.min.js

HTML：
    <!-- 
        在表单中，若对某一字段想添加验证规则，默认需要以<div class=”form-group”></div>包裹（对应错误提示会根据该class值定位），
        内部<input class="form-control" />标签必须有name属性值，此值为验证匹配字段。
    -->
    <form id="form-test">
        <div class="form-group">
            <label class="col-lg-3 control-label">Username</label>
            <div class="col-lg-9">
                <input type="text" class="form-control" name="username" />
            </div>
        </div>
        <div class="form-group">
            <label class="col-lg-3 control-label">Email address</label>
            <div class="col-lg-9">
                <input type="text" class="form-control" name="email" />
            </div>
        </div>
    </form>
    
JS:
$("#form-test").bootstrapValidator({
        /**
        *  指定不验证的情况
        *  值可设置为以下三种类型：
        *  1、String  ':disabled, :hidden, :not(:visible)'
        *  2、Array  默认值  [':disabled', ':hidden', ':not(:visible)']
        *  3、带回调函数  
            [':disabled', ':hidden', function($field, validator) {
                // $field 当前验证字段dom节点
                // validator 验证实例对象 
                // 可以再次自定义不要验证的规则
                // 必须要return，return true or false; 
                return !$field.is(':visible');
            }]
        */
    excluded: [':disabled', ':hidden', ':not(:visible)'],
        /**
        * 指定验证后验证字段的提示字体图标。（默认是bootstrap风格）
        * Bootstrap 版本 >= 3.1.0
        * 也可以使用任何自定义风格，只要引入好相关的字体文件即可
        * 默认样式 
            .form-horizontal .has-feedback .form-control-feedback {
                top: 0;
                right: 15px;
            }
        * 自定义该样式覆盖默认样式
            .form-horizontal .has-feedback .form-control-feedback {
                top: 0;
                right: -15px;
            }
            .form-horizontal .has-feedback .input-group .form-control-feedback {
                top: 0;
                right: -30px;
            }
        */
    feedbackIcons: {
        valid: 'glyphicon glyphicon-ok',
        invalid: 'glyphicon glyphicon-remove',
        validating: 'glyphicon glyphicon-refresh'
    },
        /**
        * 生效规则（三选一）
        * enabled 字段值有变化就触发验证
        * disabled,submitted 当点击提交时验证并展示错误信息
        */
    live: 'enabled',
        /**
        * 为每个字段指定通用错误提示语
        */
    message: 'This value is not valid',
        /**
        * 指定提交的按钮，例如：'.submitBtn' '#submitBtn'
        * 当表单验证不通过时，该按钮为disabled
        */
    submitButtons: 'button[type="submit"]',
        /**
        * submitHandler: function(validator, form, submitButton) {
        *   //validator: 表单验证实例对象
        *   //form  jq对象  指定表单对象
        *   //submitButton  jq对象  指定提交按钮的对象
        * }
        * 在ajax提交表单时很实用
        *   submitHandler: function(validator, form, submitButton) {
                // 实用ajax提交表单
                $.post(form.attr('action'), form.serialize(), function(result) {
                    // .自定义回调逻辑
                }, 'json');
             }
        * 
        */
    submitHandler: null,
        /**
        * 为每个字段设置统一触发验证方式（也可在fields中为每个字段单独定义），默认是live配置的方式，数据改变就改变
        * 也可以指定一个或多个（多个空格隔开） 'focus blur keyup'
        */
    trigger: null,
        /**
        * Number类型  为每个字段设置统一的开始验证情况，当输入字符大于等于设置的数值后才实时触发验证
        */
    threshold: null,
        /**
        * 表单域配置
        */
    fields: {
        //多个重复
        <fieldName>: {
                //隐藏或显示 该字段的验证
            enabled: true,
                //错误提示信息
            message: 'This value is not valid',
                /**
                * 定义错误提示位置  值为CSS选择器设置方式
                * 例如：'#firstNameMeg' '.lastNameMeg' '[data-stripe="exp-month"]'
                */
            container: null,
                /**
                * 定义验证的节点，CSS选择器设置方式，可不必须是name值。
                * 若是id，class, name属性，<fieldName>为该属性值
                * 若是其他属性值且有中划线链接，<fieldName>转换为驼峰格式  selector: '[data-stripe="exp-month"]' =>  expMonth
                */
            selector: null,
                /**
                * 定义触发验证方式（也可在fields中为每个字段单独定义），默认是live配置的方式，数据改变就改变
                * 也可以指定一个或多个（多个空格隔开） 'focus blur keyup'
                */
            trigger: null,
                // 定义每个验证规则
            validators: {
                    //多个重复
                    //官方默认验证参照  http://bv.doc.javake.cn/validators/
                    // 注：使用默认前提是引入了bootstrapValidator-all.js
                    // 若引入bootstrapValidator.js没有提供常用验证规则，需自定义验证规则哦
                <validatorName>: <validatorOptions>
                //eg.
                notEmpty: {//检测非空,radio也可用
                    message: '文本框必须输入'
                },
                stringLength: {//检测长度
                    min: 6,
                    max: 30,
                    message: '长度必须在6-30之间'
                },
                regexp: {//正则验证
                    regexp: /^[a-zA-Z0-9_\.]+$/,
                    message: '所输入的字符不符要求'
                },
                /**
                * 服务器端需要已json的形式返回数据
                * {"valid",true}  验证通过
                * {"valid",false} 验证失败，显示提示语
                */
                remote: {//ajax验证。server result:{"valid"：true or false} 向服务发送当前input name值，获得一个json数据。例表示正确：{"valid"：true}  
                     url: 'exist2.do',//验证地址
                     message: '用户已存在',//提示消息
                     delay :  2000,//每输入一个字符，就发ajax请求，服务器压力还是太大，设置2秒发送一次ajax（默认输入一个字符，提交一次，服务器压力太大）
                     type: 'POST'//请求方式
                     /**自定义提交数据，默认值提交当前input value
                      *  data: function(validator) {
                           return {
                               password: $('[name="passwordNameAttributeInYourForm"]').val(),
                               whatever: $('[name="whateverNameAttributeInYourForm"]').val()
                           };
                        }
                      */
                 },

                different: {//与指定文本框比较内容相同
                    field: '指定文本框name',
                    message: '不能与指定文本框内容相同'
                },
                emailAddress: {//验证email地址
                    message: '不是正确的email地址'
                },
                identical: {//与指定控件内容比较是否相同，比如两次密码不一致
                    field: 'confirmPassword',//指定控件name
                    message: '输入的内容不一致'
                },
                date: {//验证指定的日期格式
                    format: 'YYYY/MM/DD',
                    message: '日期格式不正确'
                },
                choice: {//check控件选择的数量
                    min: 2,
                    max: 4,
                    message: '必须选择2-4个选项'
                },
                //自定义验证规则
                callback: {
                    message: '',
                    //value：当前组件的value值，validator：当前validator
                    callback: function(value, validator) {
                        return true;
                    }
                }
            }
        }
    }
});

示例：
HTML:
<form id="form-add">
    <div class="form-group">
        <label>客群名称：</label>
        <input type="text" name="groupName">
    </div>
    <div class="form-group">
        <label>执行周期：</label>
        <input type="radio" name="runCycle" value="日">日
        <input type="radio" name="runCycle" value="周">周
        <input type="radio" name="runCycle" value="月">月
        <input type="radio" name="runCycle" value="季">季
        <input type="radio" name="runCycle" value="年">年
    </div>
</form>

JS:
    $(".form_groupInfo").bootstrapValidator({
        feedbackIcons: {
            valid: "glyphicon glyphicon-ok",
            invalid: "glyphicon glyphicon-remove",
            validating: "glyphicon glyphicon-refresh"
        },
        fields: {
            groupName: {
                validators: {
                    notEmpty: {
                        message: '请输入客群名'
                    },
                    remote: {
                        url: contextPath+'/groupinfo/checkgroupname.json',
                        message: '客群名已存在',
                        delay: 1500,
                        type: 'GET',
                        data: function(validator) {
                            return {
                                groupName : $("#txt_groupName").val(),
                                groupId : $("#hid_groupId").val()
                            };
                        }
                    }
                }
            },
            runCycle: {
                validators: {
                    notEmpty: {
                        message: '请选择执行周期'
                    },
                    //自定义的验证规则
                    callback: {
                        message: '客群的执行频率不能低于规则的最高运行频率',
                        callback: function(runCycle, validator) {
                            var maxCycle = 100;
                            var labelSelects = $(".sel_label");
                            for (var i = 0; i < labelSelects.length; i++) {
                                var labelRunCycle = $(labelSelects[i]).find("option:selected").attr("runFreq");
                                if (labelRunCycle < maxCycle) {
                                    maxCycle = labelRunCycle;
                                }
                            }
                            return !(maxCycle < runCycle);
                        }
                    }
                }
            }
        }
    });