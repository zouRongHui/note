1)hibernate.cfg.xml
	********************************************
	<session-factory>
  	<!-- 配置连接数据库的基本信息 -->
  	<property name="hibernate.connection.username">root</property>
  	<property name="hibernate.connection.password"></property>
  	<property name="hibernate.connection.driver_class">com.mysql.jdbc.Driver</property>
  	<property name="hibernate.connection.url">jdbc:mysql://localhost:3306/test</property>
  	
  	<!-- 配置进本信息 -->
  	<!-- 使用的数据库方言 -->
  	<property name="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</property>
  	<!-- 是否在控制台打印SQL -->
  	<property name="hibernate.show_sql">true</property>
  	<!-- 是否对SQL进行格式化 -->
  	<property name="hibernate.format_sql">true</property>
  	<!-- 指定自动生成数据表的策略 -->
  	<property name="hibernate.hbm2ddl.auto">update</property>
  	<!-- 设置事务隔离级别 -->
	<property name="hibernate.connection.isolation">2</property>
	<!-- 删除对象后，使其OID为null -->
	<property name="hibernate.use_identifier_rollback">true</property>
  	<!-- 为每个线程生成一个session -->
  	<property name="hibernate.current_session_context_class">thread</property>
  	
  	<!-- 使用C3P0数据源 -->
	<!-- 连接池中最大和最小连接数 -->
	<property name="hibernate.c3p0.max_size">10</property>
	<property name="hibernate.c3p0.min_size">5</property>
	<!-- 当连接池需要向数据库获取连接时，一次获取多少个连接 -->
	<property name="hibernate.c3p0.acquire_increment">3</property>
	<!-- 连接池中连接对象超时多久会被销毁，单位毫秒 -->
	<property name="hibernate.c3p0.timeout">2000</property>
	<!-- 多久会去进行一次连接对象超时销毁检测，单位毫秒 -->
	<property name="hibernate.c3p0.idle_test_period">5000</property>
	<!-- 缓存statement对象数量 -->
	<property name="hibernate.c3p0.max_statements">10</property>
  	
  	<!-- 指定关联的.hbm.xml文件 -->
  	<mapping resource="News.hbm.xml"/>
    
    <!-- 指定使用@注解的实体类 -->
    <mapping class="com.rone.hibernate.study.Employee"/>
  </session-factory>
	********************************************


2)code(5.X版本获取SessionFactory)
	********************************************
	//1.创建SessionFactory
    StandardServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder().configure().build();
    SessionFactory sessionFactory = new MetadataSources(serviceRegistry).buildMetadata().buildSessionFactory();
	//2.创建Session
	Session session = sessionFactory.openSession();
	//3.开启事务
	Transaction transaction = session.beginTransaction();
	//4.执行操作
	...
	//5.提交事务
	//首先会调用flush方法，根据session缓存中的数据更新数据表中的记录(可能是insert、delete或update)
	transaction.commit();
	//6.关闭Session
	session.close();
	//7.关闭SessionFactory
	sessionFactory.close();
	********************************************

3)  临时状态：新建的对象，不在session缓存中，也不在数据表中
	持久化状态：在session缓存中，也在数据表中
	游离状态：不在session缓存中，但在数据表中
	删除状态：被删除的对象，不存在

4)session主要方法
	void session.flush();根据session缓存中的数据更新数据表中的记录(可能是insert、delete或update)
	void session.refresh(Object);根据数据表中的记录去更新session缓存中的数据
	void session.clear();清空session缓存
	Serializable session.save(Object);将Object加入session缓存进入持久化状态
	Object session.get(Class, Serializable);根据指定的ID从数据库获取一个持久化对象，没有时返回null，立即检索
	void/Object session.load(Class, Serializable);根据指定的ID从数据库获取一个持久化对象，没有时抛出异常，延时检索
	void session.update(Object);将一个游离状态的对象转变成持久化对象
	void session.saveOrUpdate(Object);根据对象的OID去判断该对象是游离状态(save操作)还是临时状态(update操作)
	Object session.merge(Object);首先判断对象是游离态还是临时态，1)临时态:持久化该对象；2)游离态：判断session缓存中是否有同OID的持久化对象
		①有的话将持久化对象属性更新为该参数属性，返回引用，②否则判断数据表中是否有该OID的记录，没有的话同1)，有的话先从数据表加载该对象然后同①
	void session.delete(Object);根据Object(游离态or持久化态)的OID去数据表中删除记录，若OID在数据表中不存在会抛出异常
	void session.evict(Object);将一个持久化对象从session缓存中删除，变成游离态
	
5)HQL
  ********************************************
	//1. 创建Query对象
	String hql = "from POJO n where n.id > ?";
	Query query = session.createQuery(hql);
	//2. 绑定参数
	query.setInteger(0, 0);
	//3. 执行查询
	List<POJO> listNews = query.list();
	********************************************
	① HQL语句支持占位符设置参数，也支持命名参数
		String hql = "from News n where n.id > :id";
		query.setInteger("id", 0);
	② 分页检索
		setFirstResult 设置从哪开始检索
		setMaxResults 设置最多一次检索的对象数
		********************************************
		//分页检索
		String hql = "from News ";
		Query query = session.createQuery(hql);
		int pageSize = 4;
		int pages = 2;
		//设置该页的首项
		query.setFirstResult((pages - 1) * pageSize);
		//设置每页的数据量
		query.setMaxResults(pageSize);
		List<News> listNews = query.list();
		********************************************
	③ 投影检索，查询结果仅包含部分属性
			第一种，以Object接收检索数据
			********************************************
			String hql = "select n.id, n.title from News n";
			Query query = session.createQuery(hql);
			List<Object[]> list = query.list();
			********************************************
			第二种，以POJO接收检索数据
			********************************************
			//需要在POJO中创建只有所检索的属性的构造器器
			String hql = "select new News(n.id, n.title) from News n";
			Query query = session.createQuery(hql);
			List<News> list = query.list();
			********************************************